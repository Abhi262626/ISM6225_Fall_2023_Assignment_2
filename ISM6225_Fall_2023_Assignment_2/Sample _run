using System;
using System.Collections.Generic;

public class Solution
{
    public static IList<IList<int>> FindMissingRanges(int[] nums, int lower, int upper)
    {
        try
        {
            IList<IList<int>> result = new List<IList<int>>();
            long prev = (long)lower - 1; // To handle potential integer overflow when finding the missing ranges

            for (int i = 0; i <= nums.Length; i++)
            {
                long curr = (i == nums.Length) ? (long)upper + 1 : nums[i]; // To handle the upper range case

                if (prev + 1 <= curr - 1)
                {
                    if (prev + 1 == curr - 1)
                    {
                        result.Add(new List<int> { (int)(prev + 1) }); // If the range is just a single number
                    }
                    else
                    {
                        result.Add(new List<int> { (int)(prev + 1), (int)(curr - 1) }); // If the range has a start and end value
                    }
                }
                prev = curr;
            }
            return result;
        }
        catch (Exception)
        {
            throw;
        }
    }

    
    public static void Main(string[] args)
    {
        int[] nums = { 0, 1, 3, 50, 75 };
        int lower = 0;
        int upper = 99;
        IList<IList<int>> result = FindMissingRanges(nums, lower, upper);
        foreach (var range in result)
        {
            Console.WriteLine($"[{range[0]}, {range[range.Count - 1]}]");
        }

        int[] nums3 = { 5, 10, 15, 20, 25 };
        int lower3 = 0, upper3 = 30;

        IList<IList<int>> result3 = FindMissingRanges(nums3, lower3, upper3);

        foreach (var list in result3)
        {
            foreach (var num in list)
            {
                Console.Write(num + " ");
            }
            Console.WriteLine();
        }
    }
}